{"version":3,"sources":["ThreeViewer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ThreeViewer","className","ref","useRef","useLayoutEffect","onWindowResize","viewer","element","scene","THREE","camera","clientWidth","clientHeight","canvas","document","createElement","context","getContext","alpha","renderer","setSize","controls","OrbitControls","domElement","addEventListener","render","minDistance","maxDistance","target","set","update","light1","position","normalize","add","light3","light2","light4","appendChild","createScene","current","z","loader","GLTFLoader","load","gltf","undefined","error","console","aspect","updateProjectionMatrix","window","remove","removeEventListener","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","log","onUpdate","onSuccess","catch","ReactDOM","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mRA8GeA,MA5Df,YAAwD,IAAlCC,EAAiC,EAAjCA,UAEZC,EAAMC,iBAAuB,MAmDnC,OAjDAC,2BAAgB,WACZ,IACIC,EADEC,EAlDd,SAAqBC,GACjB,GAAIA,EAAS,CACT,IAAIC,EAAQ,IAAIC,IACZC,EAAS,IAAID,IAAyB,GAAIF,EAAQI,YAAYJ,EAAQK,aAAc,GAAK,KACzFC,EAASC,SAASC,cAAe,UACjCC,EAAUH,EAAOI,WAAY,SAAU,CAAEC,OAAO,IACpD,GAAIF,EAAS,CACT,IAAIG,EAAW,IAAIV,KAAqB,CAAEI,OAAQA,EAAQG,QAASA,IACnEG,EAASC,QAASb,EAAQI,YAAaJ,EAAQK,cAC/C,IAAMS,EAAW,IAAIC,IAAeZ,EAAQS,EAASI,YACrDF,EAASG,iBAAkB,UAAU,kBAAML,EAASM,OAAOjB,EAAME,MACjEW,EAASK,YAAc,EACvBL,EAASM,YAAc,GACvBN,EAASO,OAAOC,IAAK,EAAG,GAAK,IAC7BR,EAASS,SAET,IAAIC,EAAS,IAAItB,IAAwB,SAAU,GACnDsB,EAAOC,SAASH,IAAK,IAAK,IAAK,KAAMI,YACrCzB,EAAM0B,IAAKH,GAEX,IAAII,EAAS,IAAI1B,IAAwB,SAAU,GACnD0B,EAAOH,SAASH,KAAM,IAAK,IAAK,KAAMI,YACtCzB,EAAM0B,IAAKC,GAEX,IAAIC,EAAS,IAAI3B,IAAwB,SAAU,GACnD2B,EAAOJ,SAASH,IAAK,KAAM,KAAM,KAAMI,YACvCzB,EAAM0B,IAAKE,GAEX,IAAIC,EAAS,IAAI5B,IAAwB,SAAU,GAOnD,OANA4B,EAAOL,SAASH,KAAM,KAAM,KAAM,KAAMI,YACxCzB,EAAM0B,IAAKG,GAIX9B,EAAQ+B,YAAanB,EAASI,YACvB,CACHf,QACAW,WACAT,YAYO6B,CAAYrC,EAAIsC,SAG/B,GAAIlC,EAAQ,CAAC,IACFE,EAAyBF,EAAzBE,MAAME,EAAmBJ,EAAnBI,OAAOS,EAAYb,EAAZa,SACpBT,EAAOsB,SAASS,EAAI,EACpB,IAAIC,EAAS,IAAIC,IACXlB,EAAS,WACXN,EAASM,OAAOjB,EAAME,IAE1BgC,EAAOE,KAAM,0BAA0B,SAAWC,GAC9CrC,EAAM0B,IAAKW,EAAKrC,OAChBiB,WACDqB,GAAW,SAAWC,GACrBC,QAAQD,MAAOA,MAGnB1C,EAAiB,WAEb,IAAME,EAAUL,EAAIsC,QAEhBjC,IAEAG,EAAOuC,OAAS1C,EAAQI,YAAcJ,EAAQK,aAC9CF,EAAOwC,yBAEP/B,EAASC,QAASb,EAAQI,YAAaJ,EAAQK,cAC/Ca,MAKR0B,OAAO3B,iBAAiB,SAAUnB,GAG3CoB,IAGK,OAAO,WACCnB,GACAA,EAAOE,MAAM4C,SAEb/C,GACA8C,OAAOE,oBAAoB,SAAUhD,MAG/C,IAGE,yBAAKJ,UAAWA,EAAWC,IAAKA,KC1FzBoD,MAVf,WACE,OACE,yBAAKrD,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAaA,UAAU,cCIzBsD,EAAcC,QACW,cAA7BL,OAAOM,SAASC,UAEe,UAA7BP,OAAOM,SAASC,UAEhBP,OAAOM,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BzB,QAAQ0B,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBnB,QAAQ0B,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAA9B,GACLC,QAAQD,MAAM,4CAA6CA,MClGjE+B,IAASrD,OACP,kBAAC,IAAMsD,WAAP,KACE,kBAAC,EAAD,OAEFjE,SAASkE,eAAe,SDiBnB,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIkB,IACpBC,mBACA/B,OAAOM,SAAS0B,MAEJC,SAAWjC,OAAOM,SAAS2B,OAIvC,OAGFjC,OAAO3B,iBAAiB,QAAQ,WAC9B,IAAMqC,EAAK,UAAMqB,mBAAN,sBAEP3B,IAgEV,SAAiCM,EAAeC,GAE9CuB,MAAMxB,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5BpB,MAAK,SAAAqB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM1B,MAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,MAAK,WAC7Bf,OAAOM,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1Be,OAAM,WACL7B,QAAQ0B,IACN,oEAvFAqB,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM1B,MAAK,WACjClB,QAAQ0B,IACN,iHAMJd,EAAgBC,EAAOC,OC1C/BE,K","file":"static/js/main.660147ef.chunk.js","sourcesContent":["import React, { useLayoutEffect, useRef } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\n\nfunction createScene(element: HTMLDivElement | null) {\n    if (element) {\n        var scene = new THREE.Scene();\n        var camera = new THREE.PerspectiveCamera( 75, element.clientWidth/element.clientHeight, 0.1, 1000 );\n        var canvas = document.createElement( 'canvas' );\n        var context = canvas.getContext( 'webgl2', { alpha: false } );\n        if (context) {\n            var renderer = new THREE.WebGLRenderer( { canvas: canvas, context: context } );\n            renderer.setSize( element.clientWidth, element.clientHeight );\n            const controls = new OrbitControls( camera, renderer.domElement );\n            controls.addEventListener( 'change', () => renderer.render(scene,camera)); // use if there is no animation loop\n            controls.minDistance = 0;\n            controls.maxDistance = 10\n            controls.target.set( 0, 0, - 0.2 );\n            controls.update();\n\n            var light1 = new THREE.DirectionalLight( 0xFFFFFF, 5 );\n            light1.position.set( 100, 100, 100 ).normalize();\n            scene.add( light1 );\n\n            var light3 = new THREE.DirectionalLight( 0xFFFFFF, 5 );\n            light3.position.set( -100, 100, 100 ).normalize();\n            scene.add( light3 );\n\n            var light2 = new THREE.DirectionalLight( 0xFFFFFF, 5 );\n            light2.position.set( 100, -100, -100 ).normalize();\n            scene.add( light2 );\n\n            var light4 = new THREE.DirectionalLight( 0xFFFFFF, 5 );\n            light4.position.set( -100, -100, -100 ).normalize();\n            scene.add( light4 );\n\n            // document.body.appendChild( renderer.domElement );\n            // use ref as a mount point of the Three.js scene instead of the document.body\n            element.appendChild( renderer.domElement );\n            return {\n                scene,\n                renderer,\n                camera\n            }\n        }\n    }\n    return undefined;\n}\n\nfunction ThreeViewer({className}:{className?: string}) {\n\n    const ref = useRef<HTMLDivElement>(null);\n\n    useLayoutEffect(() => {\n        const viewer = createScene(ref.current);\n        let onWindowResize: () => void;\n\n        if (viewer) {\n            const {scene,camera,renderer} = viewer;\n            camera.position.z = 2;\n            var loader = new GLTFLoader();\n            const render = () => {\n                renderer.render(scene,camera);\n            }\n            loader.load( \"/3d/DamagedHelmet.gltf\", function ( gltf ) {\n                scene.add( gltf.scene );\n                render(); \n            }, undefined, function ( error ) {\n                console.error( error );\n            });\n\n            onWindowResize = () => {\n\n                const element = ref.current; \n\n                if (element) {\n\n                    camera.aspect = element.clientWidth / element.clientHeight;\n                    camera.updateProjectionMatrix();\n        \n                    renderer.setSize( element.clientWidth, element.clientHeight );\n                    render();\n                }\n    \n            }\n\n            window.addEventListener(\"resize\", onWindowResize);\n\n\n\t\t\trender();\n        }\n\n        return () => {\n            if (viewer) {\n                viewer.scene.remove();\n            }\n            if (onWindowResize) {\n                window.removeEventListener(\"resize\", onWindowResize);\n            }\n        }\n    },[]);\n\n    return (\n        <div className={className} ref={ref}/>\n    )\n\n\n}\n\nexport default ThreeViewer;\n","import React from 'react';\nimport './App.css';\nimport ThreeViewer from './ThreeViewer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ThreeViewer className=\"viewer\"/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}